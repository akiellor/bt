#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'bt'
require 'bt/yaml'
require 'json'

opts = Trollop::options do
  banner <<-EOS
Shows build results for head.

Usage:
\tbt-results [OPTIONS...] [URI|DIRECTORY]
  EOS
  opt :debug, 'Debugging text scrolls'
  opt :commit, 'Commit to get results for', :default => 'HEAD'
  opt :format, 'Output format [json|text]', :default => 'text'
  opt :commits, 'Show the build history', :type => :string
  
  conflicts :commits, :commit
end

include BT::Cli

uri = ARGV.shift || Dir.pwd

Grit.debug = true if opts[:debug]

BT::Repository.mirror(uri) do |r|
  r.update
  if opts[:commits]
    `git rev-list #{opts[:commits]}`.split("\n").each do |sha|
      commit = r.commit(sha)
      stage_definition = YAML.load(`#{find_command :stages} --commit #{commit.sha} "#{r.path}"`)
      
      puts "#{sha}: #{BT::Pipeline.new(commit, stage_definition).status}"

    end
  else
    commit = r.commit(opts[:commit])

    stage_definition = YAML.load(`#{find_command :stages} --commit #{commit.sha} "#{r.path}"`)

    format = opts[:format]
    pipeline = BT::Pipeline.new commit, stage_definition

    if format == 'text'
      puts "Results (#{commit.sha}):\n\n"

      pipeline.stages.each do |stage|
        puts "#{stage.name}: #{stage.result}"
      end
    elsif format == 'json'
      $stdout.print(pipeline.to_hash.to_json)
    end
  end
end

