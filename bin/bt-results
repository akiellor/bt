#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'bt'
require 'bt/yaml'
require 'json'

opts = Trollop::options do
  banner <<-EOS
Shows build results for head.

Usage:
\tbt-results [OPTIONS...] [URI|DIRECTORY]
  EOS
  opt :debug, 'Debugging text scrolls'
  opt :format, 'Output format [json|text]', :default => 'text'
  opt :commit, 'Show the build history', :default => 'HEAD'
  opt :max_count, 'Max number of results', :default => 1
end

include BT::Cli

uri = ARGV.shift || Dir.pwd

Grit.debug = true if opts[:debug]

FORMATS = {
  'text' => proc do |pipelines|
    pipelines.map do |p|
    stage_list = p.stages.map do |stage|
      "#{stage.name}: #{stage.result}"
    end.join("\n")
    <<-EOS
Results (#{p.commit.sha}):

#{stage_list}
EOS
    end.join("\n")
  end,
  'json' => proc { |pipelines| pipelines.map(&:to_hash).to_json },
  'short' => proc { |pipelines| pipelines.map { |p| "#{p.commit.sha}: #{p.status}" }.join("\n") }
}

BT::Repository.mirror(uri) do |r|
  r.update

  pipelines = r.commits(:start => opts[:commit], :max_count => opts[:max_count]).map do |commit|
    stage_definition = YAML.load(`#{find_command :stages} --commit #{commit.sha} "#{r.path}"`)
    BT::Pipeline.new(commit, stage_definition)
  end

  $stdout.print(FORMATS[opts[:format]].call pipelines)
end

